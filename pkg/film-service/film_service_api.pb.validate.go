// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: alex1472/film_service_api/v1/film_service_api.proto

package film_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Film with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Film) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Rating

	// no validation rules for ShortDescription

	return nil
}

// FilmValidationError is the validation error returned by Film.Validate if the
// designated constraints aren't met.
type FilmValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilmValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilmValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilmValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilmValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilmValidationError) ErrorName() string { return "FilmValidationError" }

// Error satisfies the builtin error interface
func (e FilmValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilm.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilmValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilmValidationError{}

// Validate checks the field values on DescribeFilmV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeFilmV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return DescribeFilmV1RequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DescribeFilmV1RequestValidationError is the validation error returned by
// DescribeFilmV1Request.Validate if the designated constraints aren't met.
type DescribeFilmV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeFilmV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeFilmV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeFilmV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeFilmV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeFilmV1RequestValidationError) ErrorName() string {
	return "DescribeFilmV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeFilmV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeFilmV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeFilmV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeFilmV1RequestValidationError{}

// Validate checks the field values on DescribeFilmV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeFilmV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeFilmV1ResponseValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeFilmV1ResponseValidationError is the validation error returned by
// DescribeFilmV1Response.Validate if the designated constraints aren't met.
type DescribeFilmV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeFilmV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeFilmV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeFilmV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeFilmV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeFilmV1ResponseValidationError) ErrorName() string {
	return "DescribeFilmV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeFilmV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeFilmV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeFilmV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeFilmV1ResponseValidationError{}

// Validate checks the field values on CreateFilmV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateFilmV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 100 {
		return CreateFilmV1RequestValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if val := m.GetRating(); val <= 0 || val >= 10 {
		return CreateFilmV1RequestValidationError{
			field:  "Rating",
			reason: "value must be inside range (0, 10)",
		}
	}

	if l := utf8.RuneCountInString(m.GetShortDescription()); l < 2 || l > 300 {
		return CreateFilmV1RequestValidationError{
			field:  "ShortDescription",
			reason: "value length must be between 2 and 300 runes, inclusive",
		}
	}

	return nil
}

// CreateFilmV1RequestValidationError is the validation error returned by
// CreateFilmV1Request.Validate if the designated constraints aren't met.
type CreateFilmV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFilmV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFilmV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFilmV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFilmV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFilmV1RequestValidationError) ErrorName() string {
	return "CreateFilmV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFilmV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFilmV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFilmV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFilmV1RequestValidationError{}

// Validate checks the field values on CreateFilmV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateFilmV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FilmId

	return nil
}

// CreateFilmV1ResponseValidationError is the validation error returned by
// CreateFilmV1Response.Validate if the designated constraints aren't met.
type CreateFilmV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFilmV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFilmV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFilmV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFilmV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFilmV1ResponseValidationError) ErrorName() string {
	return "CreateFilmV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFilmV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFilmV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFilmV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFilmV1ResponseValidationError{}

// Validate checks the field values on ListFilmsV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListFilmsV1Request) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListFilmsV1RequestValidationError is the validation error returned by
// ListFilmsV1Request.Validate if the designated constraints aren't met.
type ListFilmsV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFilmsV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFilmsV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFilmsV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFilmsV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFilmsV1RequestValidationError) ErrorName() string {
	return "ListFilmsV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListFilmsV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFilmsV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFilmsV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFilmsV1RequestValidationError{}

// Validate checks the field values on ListFilmsV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListFilmsV1Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFilmsV1ResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListFilmsV1ResponseValidationError is the validation error returned by
// ListFilmsV1Response.Validate if the designated constraints aren't met.
type ListFilmsV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFilmsV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFilmsV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFilmsV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFilmsV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFilmsV1ResponseValidationError) ErrorName() string {
	return "ListFilmsV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFilmsV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFilmsV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFilmsV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFilmsV1ResponseValidationError{}

// Validate checks the field values on RemoveFilmV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveFilmV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return RemoveFilmV1RequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// RemoveFilmV1RequestValidationError is the validation error returned by
// RemoveFilmV1Request.Validate if the designated constraints aren't met.
type RemoveFilmV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveFilmV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveFilmV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveFilmV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveFilmV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveFilmV1RequestValidationError) ErrorName() string {
	return "RemoveFilmV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveFilmV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveFilmV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveFilmV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveFilmV1RequestValidationError{}

// Validate checks the field values on RemoveFilmV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveFilmV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Found

	return nil
}

// RemoveFilmV1ResponseValidationError is the validation error returned by
// RemoveFilmV1Response.Validate if the designated constraints aren't met.
type RemoveFilmV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveFilmV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveFilmV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveFilmV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveFilmV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveFilmV1ResponseValidationError) ErrorName() string {
	return "RemoveFilmV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveFilmV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveFilmV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveFilmV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveFilmV1ResponseValidationError{}
